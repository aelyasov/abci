<?xml version="1.0" encoding="UTF-8"?><apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
  SpriteAsset is a subclass of the flash.display.Sprite class which
  represents vector graphic images that you embed in an application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpriteAsset is a subclass of the flash.display.Sprite class which
  represents vector graphic images that you embed in an application.
  It implements the IFlexDisplayObject interface, which makes it
  possible for an embedded vector graphic image to be displayed in an Image
  control, or to be used as a container background or a component skin.
 
  <p>The vector graphic image that you're embedding can be in an SVG file.
  You can also embed a sprite symbol that is in a SWF file produced
  by Flash.
  In both cases, the MXML compiler autogenerates a class that extends
  SpriteAsset to represent the embedded vector graphic image.</p>
 
  <p>You don't generally have to use the SpriteAsset class directly
  when you write a Flex application.
  For example, you can embed a sprite symbol from a SWF file and display
  it in an Image control by writing the following:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Assets.swf', symbol='Logo')"/&gt;</pre>
 
  <p>Or use it as the application's background image in CSS syntax
  by writing the following:</p>
 
  <pre>
  &lt;fx:Style&gt;
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol='Logo')
      }
  &lt;fx:Style/&gt;</pre>
 
  <p>without having to understand that the MXML compiler has created
  a subclass of BitmapAsset for you.</p>
 
  <p>However, it may be useful to understand what is happening
  at the ActionScript level.
  To embed a vector graphic image in ActionScript, you declare a variable
  of type Class, and put <codeph>[Embed]</codeph> metadata on it.
  For example, you embed a sprite symbol from a SWF file like this:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="Logo")]
  private var logoClass:Class;</pre>
 
  <p>The MXML compiler notices that the Logo symbol in Assets.swf
  is a sprite, autogenerates a subclass of the SpriteAsset class
  to represent it, and sets your variable to be a reference to this
  autogenerated class.
  You can then use this class reference to create instances of the
  SpriteAsset using the <codeph>new</codeph> operator, and use APIs
  of the Sprite class on them:</p>
 
  <pre>
  var logo:SpriteAsset = SpriteAsset(new logoClass());
  logo.rotation=45;</pre>
 
  <p>However, you rarely need to create SpriteAsset instances yourself
  because image-related properties and styles can simply be set to an
  image-producing class, and components will create image instances
  as necessary.
  For example, to display this vector graphic image in an Image control,
  you can set the Image's <codeph>source</codeph> property to
  <codeph>logoClass</codeph>.
  In MXML you could do this as follows:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/&gt;</pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SpriteAsset:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SpriteAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          An element must call this method when its layoutDirection changes or
          when its parent's layoutDirection changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          An element must call this method when its layoutDirection changes or
          when its parent's layoutDirection changes.  
         
          If they differ, this method is responsible for mirroring the element’s contents
          and for updating the element’s post-layout transform so that descendants inherit
          a mirrored coordinate system.  IVisualElements typically implement
          mirroring by using postLayoutTransformOffsets to scale the X axis by -1 and 
          to translate the x coordinate of the origin by the element's width.
         
          The net effect of this "mirror" transform is to reverse the direction
          in which the X axis increases without changing the element's location
          relative to its parent's origin.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:move"><apiName>move</apiName><shortdesc>
      
	  Moves this object to the specified x and y coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The new x-position for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The new y-position for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Moves this object to the specified x and y coordinates.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Sets the actual size of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>The new width for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>The new height for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Sets the actual size of this object.
	 
	  <p>This method is mainly for use in implementing the
	  <codeph>updateDisplayList()</codeph> method, which is where
	  you compute this object's actual size based on
	  its explicit size, parent-relative (percent) size,
	  and measured size.
	  You then apply this actual size to the object
	  by calling <codeph>setActualSize()</codeph>.</p>
	 
	  <p>In other situations, you should be setting properties
	  such as <codeph>width</codeph>, <codeph>height</codeph>,
	  <codeph>percentWidth</codeph>, or <codeph>percentHeight</codeph>
	  rather than calling this method.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SpriteAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Returns an EdgeMetrics object for the border that has four properties:
      left, top, right,
      and bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Returns an EdgeMetrics object for the border that has four properties:
      <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph>,
      and <codeph>bottom</codeph>.
      The value of each property is equal to the thickness of one side
      of the border, in pixels.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          Specifies the desired layout direction for an element: one of LayoutDirection.LTR 
          (left to right), LayoutDirection.RTL (right to left), or null (inherit).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          Specifies the desired layout direction for an element: one of LayoutDirection.LTR 
          (left to right), LayoutDirection.RTL (right to left), or null (inherit).   
         
          This property is typically backed by an inheriting style.  If null,
          the layoutDirection style will be set to undefined.
         
          Classes like GraphicElement, which implement ILayoutDirectionElement but do not 
          support styles, must additionally support a null value for this property 
          which means the layoutDirection must be inherited from its parent. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  The measured height of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured height of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  The measured width of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured width of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
  The EdgeMetrics class specifies the thickness, in pixels,
  of the four edge regions around a visual component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  The EdgeMetrics class specifies the thickness, in pixels,
  of the four edge regions around a visual component.
 
  <p>The following Flex properties have values that are EdgeMetrics
  objects:</p>
 
  <ul>
  <li>The <codeph>borderMetrics</codeph> property of the mx.core.Container and
  mx.skins.Border classes includes only the border in the calculations 
  of the property values of the EdgeMetrics object.</li>
 
  <li>The <codeph>viewMetrics</codeph> property of the mx.core.Container
  class, and of subclasses of the Container class, includes possible 
  scrollbars and non-content elements -- such as a Panel container's
  header area and the area for a ControlBar component -- in the calculations
  of the  property values of the EdgeMetrics object.</li>
 
  <li>The <codeph>viewMetricsAndPadding</codeph> property of the
  mx.core.Container class includes the items listed for the
  <codeph>viewMetrics</codeph> property, plus the any areas defined by 
  the margins of the container in the calculations of the 
  property values of the EdgeMetrics object.</li>
  </ul>
 
  <p>These three properites all return a reference to the same
  EdgeMetrics object that the Container is using for its measurement
  and layout; they do not return a copy of this object.
  If you need a copy, call the <codeph>clone()</codeph> method.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.skins.Border.xml"><linktext>mx.skins.Border</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.core:EdgeMetrics:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The width, in pixels, of the left edge region.
     
      </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The height, in pixels, of the top edge region.
     
      </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The width, in pixels, of the right edge region.
     
      </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The height, in pixels, of the bottom edge region.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:EdgeMetrics:clone"><apiName>clone</apiName><shortdesc>
      Returns a copy of this EdgeMetrics object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A copy of this EdgeMetrics object.
      
      </apiDesc><apiOperationClassifier>mx.core:EdgeMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Returns a copy of this EdgeMetrics object.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:EdgeMetrics:EMPTY"><apiName>EMPTY</apiName><shortdesc>
      An EdgeMetrics object with a value of zero for its
      left, top, right,
      and bottom properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      An EdgeMetrics object with a value of zero for its
      <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph>,
      and <codeph>bottom</codeph> properties.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:bottom"><apiName>bottom</apiName><shortdesc>
      The height, in pixels, of the bottom edge region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      The height, in pixels, of the bottom edge region.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:left"><apiName>left</apiName><shortdesc>
      The width, in pixels, of the left edge region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      The width, in pixels, of the left edge region.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:right"><apiName>right</apiName><shortdesc>
      The width, in pixels, of the right edge region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      The width, in pixels, of the right edge region.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:top"><apiName>top</apiName><shortdesc>
      The height, in pixels, of the top edge region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      The height, in pixels, of the top edge region.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
  ButtonAsset is a subclass of the flash.display.SimpleButton class
  which represents button symbols that you embed in a Flex
  application from a SWF file produced by Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexSimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset is a subclass of the flash.display.SimpleButton class
  which represents button symbols that you embed in a Flex
  application from a SWF file produced by Flash.
  It implements the IFlexDisplayObject interface, which makes it
  possible for a SimpleButtonAsset to be displayed in an Image control,
  or to be used as a container background or a component skin.
 
  <p>This class is included in Flex for completeness, so that any kind
  of symbol in a SWF file produced by Flash can be embedded
  in a Flex application.
  However, Flex applications do not typically use embedded SimpleButtons.
  Refer to more commonly-used asset classes such as BitmapAsset
  for more information about how embedded assets work in Flex.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ButtonAsset:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ButtonAsset:move"><apiName>move</apiName><shortdesc>
      
	  Moves this object to the specified x and y coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The new x-position for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The new y-position for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Moves this object to the specified x and y coordinates.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ButtonAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Sets the actual size of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>The new width for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>The new height for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Sets the actual size of this object.
	 
	  <p>This method is mainly for use in implementing the
	  <codeph>updateDisplayList()</codeph> method, which is where
	  you compute this object's actual size based on
	  its explicit size, parent-relative (percent) size,
	  and measured size.
	  You then apply this actual size to the object
	  by calling <codeph>setActualSize()</codeph>.</p>
	 
	  <p>In other situations, you should be setting properties
	  such as <codeph>width</codeph>, <codeph>height</codeph>,
	  <codeph>percentWidth</codeph>, or <codeph>percentHeight</codeph>
	  rather than calling this method.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ButtonAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  The measured height of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured height of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ButtonAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  The measured width of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured width of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
  MovieClipLoaderAsset is a subclass of the MovieClipAsset class
  which represents SWF files that you embed in a Flex application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:MovieClipAsset</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipLoaderAsset is a subclass of the MovieClipAsset class
  which represents SWF files that you embed in a Flex application.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:MovieClipLoaderAsset_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Dispatched after the SWF asset has been fully loaded.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Dispatched after the SWF asset has been fully loaded.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:MovieClipLoaderAsset:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
	  Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialHeight"><apiName>initialHeight</apiName><shortdesc>
	  Backing storage for the measuredHeight property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Backing storage for the <codeph>measuredHeight</codeph> property.
	  Subclasses should set this value in the constructor.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialWidth"><apiName>initialWidth</apiName><shortdesc>
	  Backing storage for the measuredWidth property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Backing storage for the <codeph>measuredWidth</codeph> property.
	  Subclasses should set this value in the constructor.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:movieClipData:get"><apiName>movieClipData</apiName><shortdesc>
	  A ByteArray containing the inner content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:ByteArray"/></apiValueDef><apiDesc>
	  A ByteArray containing the inner content.
	  Overridden in subclasses.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeaterClient"><apiName>IRepeaterClient</apiName><shortdesc>
  The IRepeaterClient interface defines the APIs for components
  that can have multiple instances created by a Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  The IRepeaterClient interface defines the APIs for components
  that can have multiple instances created by a Repeater.
  The IRepeaterClient interface is implemented by the UIComponent class
  and so is inherited by all Flex framework controls and containers.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Initializes the instanceIndices,
      repeaterIndices, and repeaters properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>The parent Repeater that created this component.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initializes the <codeph>instanceIndices</codeph>,
      <codeph>repeaterIndices</codeph>, and <codeph>repeaters</codeph> properties.
     
      <p>This method is called by the Flex framework.
      Developers should not need to call it.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      An Array that contains the indices required
      to reference the repeated component instance from its document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      An Array that contains the indices required
      to reference the repeated component instance from its document. 
      This Array is empty unless the component
      is within one or more Repeaters.
      The first element corresponds to the outermost Repeater.
      For example, if the <codeph>id</codeph> is <codeph>"b"</codeph>
      and <codeph>instanceIndices</codeph> is <codeph>[ 2, 4 ]</codeph>,
      you would reference it on the document as <codeph>b[2][4]</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:isDocument:get"><apiName>isDocument</apiName><shortdesc conref="mx.core.UIComponent#isDocument">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isDocument">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      An Array that contains the indices of the items in the data
      providers of the Repeaters that produced the component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      An Array that contains the indices of the items in the data
      providers of the Repeaters that produced the component.
      The Array is empty unless the component is within one or more
      Repeaters.
      The first element corresponds to the outermost Repeater component.
      For example, if <codeph>repeaterIndices</codeph> is <codeph>[ 2, 4 ]</codeph>,
      the outer Repeater component used its <codeph>dataProvider[2]</codeph>
      data item and the inner Repeater component used its
      <codeph>dataProvider[4]</codeph> data item.
     
      <p>This property differs from <codeph>instanceIndices</codeph>
      if the <codeph>startingIndex</codeph> of any of the Repeater components
      is non-zero.
      For example, even if a Repeater component starts at
      <codeph>dataProvider</codeph> item 4, the document reference of the first
      repeated component is <codeph>b[0]</codeph>, not <codeph>b[4]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      An Array that contains any enclosing Repeaters of the component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      An Array that contains any enclosing Repeaters of the component.
      The Array is empty unless the component is within one or more Repeaters.
      The first element corresponds to the outermost Repeater. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexDisplayObject"><apiName>IFlexDisplayObject</apiName><shortdesc>
  The IFlexDisplayObject interface defines the interface for skin elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.display:IBitmapDrawable</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  The IFlexDisplayObject interface defines the interface for skin elements.
  At a minimum, a skin must be a DisplayObject and implement this interface.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getBounds"><apiName>getBounds</apiName><shortdesc conref="flash.display.DisplayObject#getBounds()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getBounds()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getRect"><apiName>getRect</apiName><shortdesc conref="flash.display.DisplayObject#getRect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getRect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:globalToLocal"><apiName>globalToLocal</apiName><shortdesc conref="flash.display.DisplayObject#globalToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#globalToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestObject"><apiName>hitTestObject</apiName><shortdesc conref="flash.display.DisplayObject#hitTestObject()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestObject()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestPoint"><apiName>hitTestPoint</apiName><shortdesc conref="flash.display.DisplayObject#hitTestPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>shapeFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:localToGlobal"><apiName>localToGlobal</apiName><shortdesc conref="flash.display.DisplayObject#localToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#localToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:move"><apiName>move</apiName><shortdesc>
	  Moves this object to the specified x and y coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The new x-position for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The new y-position for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Moves this object to the specified x and y coordinates.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:setActualSize"><apiName>setActualSize</apiName><shortdesc>
	  Sets the actual size of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>The new width for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>The new height for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Sets the actual size of this object.
	 
	  <p>This method is mainly for use in implementing the
	  <codeph>updateDisplayList()</codeph> method, which is where
	  you compute this object's actual size based on
	  its explicit size, parent-relative (percent) size,
	  and measured size.
	  You then apply this actual size to the object
	  by calling <codeph>setActualSize()</codeph>.</p>
	 
	  <p>In other situations, you should be setting properties
	  such as <codeph>width</codeph>, <codeph>height</codeph>,
	  <codeph>percentWidth</codeph>, or <codeph>percentHeight</codeph>
	  rather than calling this method.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:accessibilityProperties:get"><apiName>accessibilityProperties</apiName><shortdesc conref="flash.display.DisplayObject#accessibilityProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.accessibility:AccessibilityProperties"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#accessibilityProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:blendMode:get"><apiName>blendMode</apiName><shortdesc conref="flash.display.DisplayObject#blendMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#blendMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:cacheAsBitmap:get"><apiName>cacheAsBitmap</apiName><shortdesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:filters:get"><apiName>filters</apiName><shortdesc conref="flash.display.DisplayObject#filters">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#filters">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc conref="flash.display.DisplayObject#loaderInfo">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#loaderInfo">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mask:get"><apiName>mask</apiName><shortdesc conref="flash.display.DisplayObject#mask">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mask">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
	  The measured height of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  The measured height of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
	  The measured width of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  The measured width of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseX:get"><apiName>mouseX</apiName><shortdesc conref="flash.display.DisplayObject#mouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseY:get"><apiName>mouseY</apiName><shortdesc conref="flash.display.DisplayObject#mouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:name:get"><apiName>name</apiName><shortdesc conref="flash.display.DisplayObject#name">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#name">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:opaqueBackground:get"><apiName>opaqueBackground</apiName><shortdesc conref="flash.display.DisplayObject#opaqueBackground">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#opaqueBackground">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:parent:get"><apiName>parent</apiName><shortdesc conref="flash.display.DisplayObject#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:root:get"><apiName>root</apiName><shortdesc conref="flash.display.DisplayObject#root">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#root">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:rotation:get"><apiName>rotation</apiName><shortdesc conref="flash.display.DisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scale9Grid:get"><apiName>scale9Grid</apiName><shortdesc conref="flash.display.DisplayObject#scale9Grid">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scale9Grid">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleX:get"><apiName>scaleX</apiName><shortdesc conref="flash.display.DisplayObject#scaleX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleY:get"><apiName>scaleY</apiName><shortdesc conref="flash.display.DisplayObject#scaleY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scrollRect:get"><apiName>scrollRect</apiName><shortdesc conref="flash.display.DisplayObject#scrollRect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scrollRect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:stage:get"><apiName>stage</apiName><shortdesc conref="flash.display.DisplayObject#stage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#stage">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:transform:get"><apiName>transform</apiName><shortdesc conref="flash.display.DisplayObject#transform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#transform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:visible:get"><apiName>visible</apiName><shortdesc conref="flash.display.DisplayObject#visible">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#visible">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModule"><apiName>IFlexModule</apiName><shortdesc>
  The IFlexModule interface is used as an optional contract with IFlexModuleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  The IFlexModule interface is used as an optional contract with IFlexModuleFactory.
  When an IFlexModule instance is created with the IFlexModuleFactory, the factory
  stores a reference to itself after creation.
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IFlexAsset"><apiName>IFlexAsset</apiName><shortdesc>
  IFlexAsset is a marker interface with the following meaning:
  if a class declares that it implements IFlexAsset,
  then that class represents an asset -- such as a bitmap, a font,
  or a sound -- that has been embedded in a Flex application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexAsset is a marker interface with the following meaning:
  if a class declares that it implements IFlexAsset,
  then that class represents an asset -- such as a bitmap, a font,
  or a sound -- that has been embedded in a Flex application.
  This interface does not define any properties or methods that the
  class must actually implement.
 
  <p>The player uses ActionScript classes to represent
  embedded assets as well as executable ActionScript code.
  When you embed an asset in a Flex application, the MXML compiler
  autogenerates a class to represent it, and all such classes
  declare that they implement IFlexAsset so that they can be
  distinguished from the code classes.</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
  FlexMovieClip is a subclass of the Player's MovieClip class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexMovieClip is a subclass of the Player's MovieClip class.
  It overrides the <codeph>toString()</codeph> method
  to return a string indicating the location of the object
  within the hierarchy of DisplayObjects in the application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexMovieClip:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
	 
	  <p>Sets the <codeph>name</codeph> property to a string
	  returned by the <codeph>createUniqueName()</codeph>
	  method of the mx.utils.NameUtils class.</p>
	 
	  <p>This string is the name of the object's class concatenated
	  with an integer that is unique within the application,
	  such as <codeph>"FlexMovieClip14"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexMovieClip:toString"><apiName>toString</apiName><shortdesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A String indicating the location of this object
	  within the DisplayObject hierarchy. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.
	  This string, such as <codeph>"MyApp0.HBox5.FlexMovieClip14"</codeph>,
	  is built by the <codeph>displayObjectToString()</codeph> method
	  of the mx.utils.NameUtils class from the <codeph>name</codeph>
	  property of the object and its ancestors.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IBorder"><apiName>IBorder</apiName><shortdesc>
  The IBorder interface defines the interface that all classes 
  used for border skins should implement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  The IBorder interface defines the interface that all classes 
  used for border skins should implement.
 
  <p>It is not an error if the border skin does not implement IBorder. 
  In this case, however, the container using the skin cannot determine 
  the border metrics of the border. 
  Therefore, the container places content starting at its top-left edge 
  (adjusted for padding, if any). 
  For the HaloBorder class, the <codeph>borderThickness</codeph> style 
  usually determines the value of the <codeph>borderMetrics</codeph> style. 
  For graphical skin classes, Flex examines the <codeph>scale9Grid</codeph>
  property to determine the value of the <codeph>borderMetrics</codeph> style.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IBorder:mx.core:IBorder:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Returns an EdgeMetrics object for the border that has four properties:
      left, top, right,
      and bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Returns an EdgeMetrics object for the border that has four properties:
      <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph>,
      and <codeph>bottom</codeph>.
      The value of each property is equal to the thickness of one side
      of the border, in pixels.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IAssetLayoutFeatures"><apiName>IAssetLayoutFeatures</apiName><shortdesc>
  The IAssetLayoutFeatures interface defines the minimum properties and methods 
  required for an Object to support advanced transforms in embedded assets.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  The IAssetLayoutFeatures interface defines the minimum properties and methods 
  required for an Object to support advanced transforms in embedded assets.
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.AdvancedLayoutFeatures.xml"><linktext>mx.core.AdvancedLayoutFeatures</linktext></link></related-links><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix3D:get"><apiName>computedMatrix3D</apiName><shortdesc>
      The computed 3D matrix, calculated by combining the 3D layout matrix and any offsets provided.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      The computed 3D matrix, calculated by combining the 3D layout matrix and any offsets provided.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix:get"><apiName>computedMatrix</apiName><shortdesc>
      The computed matrix, calculated by combining the layout matrix and any offsets provided.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      The computed matrix, calculated by combining the layout matrix and any offsets provided.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:is3D:get"><apiName>is3D</apiName><shortdesc>
      True if the computed transform has 3D values.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True if the computed transform has 3D values.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutIs3D:get"><apiName>layoutIs3D</apiName><shortdesc>
      True if the layout transform has 3D values.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True if the layout transform has 3D values.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutWidth:get"><apiName>layoutWidth</apiName><shortdesc>
      Used by the mirroring transform.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Used by the mirroring transform. See the mirror property.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:mirror:get"><apiName>mirror</apiName><shortdesc>
      If true the X axis is scaled by -1 and the x coordinate of the origin
      is translated by the component's width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      If true the X axis is scaled by -1 and the x coordinate of the origin
      is translated by the component's width.  
     
      The net effect of this "mirror" transform is to flip the direction 
      that the X axis increases in without changing the layout element's 
      location relative to the parent's origin.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchX:get"><apiName>stretchX</apiName><shortdesc>
      The stretchY is the horizontal component of the stretch scale factor which
      is applied before any other transformation property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      The stretchY is the horizontal component of the stretch scale factor which
      is applied before any other transformation property.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchY:get"><apiName>stretchY</apiName><shortdesc>
      The stretchY is the vertical component of the stretch scale factor which
      is applied before any other transformation property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      The stretchY is the vertical component of the stretch scale factor which
      is applied before any other transformation property.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      The 3D matrix used during layout calculations to determine the layout and size of the component and its parent and siblings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      The 3D matrix used during layout calculations to determine the layout and size of the component and its parent and siblings.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix:set"><apiName>layoutMatrix</apiName><shortdesc>
      The 2D matrix used during layout calculations to determine the layout and size of the component and its parent and siblings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      The 2D matrix used during layout calculations to determine the layout and size of the component and its parent and siblings.
      
       </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationX:set"><apiName>layoutRotationX</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the rotation around the X axis of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationY:set"><apiName>layoutRotationY</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the rotation around the Y axis of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationZ:set"><apiName>layoutRotationZ</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the rotation around the Z axis of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleX:set"><apiName>layoutScaleX</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the scale along the X axis of the layout matrix used in layout and in 
      the computed transform.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleY:set"><apiName>layoutScaleY</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the scale along the Y axis of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleZ:set"><apiName>layoutScaleZ</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the scale along the Z axis of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutX:set"><apiName>layoutX</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the x value of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutY:set"><apiName>layoutY</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the y value of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutZ:set"><apiName>layoutZ</apiName><shortdesc>
      Layout transform convenience property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layout transform convenience property.  Represents the z value of the layout matrix used in layout and in 
      the computed transform.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformX:set"><apiName>transformX</apiName><shortdesc>
      The x value of the point around which any rotation and scale is performed in both the layout and computed matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      The x value of the point around which any rotation and scale is performed in both the layout and computed matrix.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformY:set"><apiName>transformY</apiName><shortdesc>
      The y value of the point around which any rotation and scale is performed in both the layout and computed matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      The y value of the point around which any rotation and scale is performed in both the layout and computed matrix.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformZ:set"><apiName>transformZ</apiName><shortdesc>
      The z value of the point around which any rotation and scale is performed in both the layout and computed matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      The z value of the point around which any rotation and scale is performed in both the layout and computed matrix.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
  FlexTextField is a subclass of the Player's TextField class
  and the superclass of UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexTextField is a subclass of the Player's TextField class
  and the superclass of UITextField.
  It overrides the <codeph>toString()</codeph> method
  to return a string indicating the location of the object
  within the hierarchy of DisplayObjects in the application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexTextField:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
	 
	  <p>Sets the <codeph>name</codeph> property to a string
	  returned by the <codeph>createUniqueName()</codeph>
	  method of the mx.utils.NameUtils class.</p>
	 
	  <p>This string is the name of the object's class concatenated
	  with an integer that is unique within the application,
	  such as <codeph>"UITextField18"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexTextField:toString"><apiName>toString</apiName><shortdesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A String indicating the location of this object
	  within the DisplayObject hierarchy. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.
	  This string, such as <codeph>"MyApp0.HBox5.UITextField18"</codeph>,
	  is built by the <codeph>displayObjectToString()</codeph> method
	  of the mx.utils.NameUtils class from the <codeph>name</codeph>
	  property of the object and its ancestors.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
  BitmapAsset is a subclass of the flash.display.Bitmap class
  which represents bitmap images that you embed in a Flex application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexBitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  BitmapAsset is a subclass of the flash.display.Bitmap class
  which represents bitmap images that you embed in a Flex application.
  It implements the IFlexDisplayObject interface, which makes it
  possible for an embedded bitmap image to be displayed in an Image control,
  or to be used as a container background or a component skin.
 
  <p>The bitmap image that you're embedding can be in a JPEG, GIF,
  or PNG file.
  You can also embed a bitmap symbol that is in a SWF file produced
  by Flash.
  In each of these cases, the MXML compiler autogenerates a class
  that extends BitmapAsset to represent the embedded bitmap image.</p>
 
  <p>You don't generally have to use the BitmapAsset class directly
  when you write a Flex application.
  For example, you can embed a GIF file and display the image
  in an Image control by writing the gollowing:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Logo.gif')"/&gt;</pre>
 
  <p>or use it as the application's background image in CSS syntax
  by writing</p>
 
  <pre>
  &lt;fx:Style&gt;
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Logo.gif")
      }
  &lt;fx:Style/&gt;</pre>
 
  <p>without having to understand that the MXML compiler has created
  a subclass of BitmapAsset for you.</p>
 
  <p>However, it may be useful to understand what is happening
  at the ActionScript level.
  To embed a bitmap image in ActionScript, you declare a variable
  of type Class, and put <codeph>[Embed]</codeph> metadata on it.
  For example, you embed a GIF file like this:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Logo.gif")]
  private var logoClass:Class;</pre>
 
  <p>The MXML compiler sees the .gif extension, transcodes the GIF data
  into the bitmap format that the player uses, autogenerates
  a subclass of the BitmapAsset class, and sets your variable
  to be a reference to this autogenerated class.
  You can then use this class reference to create instances of the
  BitmapAsset using the <codeph>new</codeph> operator, and you can use
  APIs of the BitmapAsset class on them:</p>
 
  <pre>
  var logo:BitmapAsset = BitmapAsset(new logoClass());
  logo.bitmapData.noise(4);</pre>
 
  <p>However, you rarely need to create BitmapAsset instances yourself
  because image-related properties and styles can simply be set to an
  image-producing class, and components will create image instances
  as necessary.
  For example, to display this image in an Image control, you can 
  set the Image's <codeph>source</codeph> property to <codeph>logoClass</codeph>.
  In MXML you could do this as follows:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/&gt;</pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:BitmapAsset:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>The data for the bitmap image. 
     
      </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Whether or not the bitmap is snapped
      to the nearest pixel.
     
      </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether or not the bitmap is smoothed when scaled. 
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:BitmapAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          An element must call this method when its layoutDirection changes or
          when its parent's layoutDirection changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          An element must call this method when its layoutDirection changes or
          when its parent's layoutDirection changes.  
         
          If they differ, this method is responsible for mirroring the element’s contents
          and for updating the element’s post-layout transform so that descendants inherit
          a mirrored coordinate system.  IVisualElements typically implement
          mirroring by using postLayoutTransformOffsets to scale the X axis by -1 and 
          to translate the x coordinate of the origin by the element's width.
         
          The net effect of this "mirror" transform is to reverse the direction
          in which the X axis increases without changing the element's location
          relative to its parent's origin.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:move"><apiName>move</apiName><shortdesc>
      
	  Moves this object to the specified x and y coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The new x-position for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The new y-position for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Moves this object to the specified x and y coordinates.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Sets the actual size of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>The new width for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>The new height for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Sets the actual size of this object.
	 
	  <p>This method is mainly for use in implementing the
	  <codeph>updateDisplayList()</codeph> method, which is where
	  you compute this object's actual size based on
	  its explicit size, parent-relative (percent) size,
	  and measured size.
	  You then apply this actual size to the object
	  by calling <codeph>setActualSize()</codeph>.</p>
	 
	  <p>In other situations, you should be setting properties
	  such as <codeph>width</codeph>, <codeph>height</codeph>,
	  <codeph>percentWidth</codeph>, or <codeph>percentHeight</codeph>
	  rather than calling this method.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:BitmapAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          Specifies the desired layout direction for an element: one of LayoutDirection.LTR 
          (left to right), LayoutDirection.RTL (right to left), or null (inherit).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          Specifies the desired layout direction for an element: one of LayoutDirection.LTR 
          (left to right), LayoutDirection.RTL (right to left), or null (inherit).   
         
          This property is typically backed by an inheriting style.  If null,
          the layoutDirection style will be set to undefined.
         
          Classes like GraphicElement, which implement ILayoutDirectionElement but do not 
          support styles, must additionally support a null value for this property 
          which means the layoutDirection must be inherited from its parent. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  The measured height of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured height of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  The measured width of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured width of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutDirectionElement"><apiName>ILayoutDirectionElement</apiName><shortdesc>
      The ILayoutDirectionElement interface defines the minimum properties and methods 
      required for an Object to support the layoutDirection property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      The ILayoutDirectionElement interface defines the minimum properties and methods 
      required for an Object to support the layoutDirection property.
      
      </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.LayoutDirection.xml"><linktext>mx.core.LayoutDirection</linktext></link></related-links><apiOperation id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
          An element must call this method when its layoutDirection changes or
          when its parent's layoutDirection changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          An element must call this method when its layoutDirection changes or
          when its parent's layoutDirection changes.  
         
          If they differ, this method is responsible for mirroring the element’s contents
          and for updating the element’s post-layout transform so that descendants inherit
          a mirrored coordinate system.  IVisualElements typically implement
          mirroring by using postLayoutTransformOffsets to scale the X axis by -1 and 
          to translate the x coordinate of the origin by the element's width.
         
          The net effect of this "mirror" transform is to reverse the direction
          in which the X axis increases without changing the element's location
          relative to its parent's origin.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
          Specifies the desired layout direction for an element: one of LayoutDirection.LTR 
          (left to right), LayoutDirection.RTL (right to left), or null (inherit).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          Specifies the desired layout direction for an element: one of LayoutDirection.LTR 
          (left to right), LayoutDirection.RTL (right to left), or null (inherit).   
         
          This property is typically backed by an inheriting style.  If null,
          the layoutDirection style will be set to undefined.
         
          Classes like GraphicElement, which implement ILayoutDirectionElement but do not 
          support styles, must additionally support a null value for this property 
          which means the layoutDirection must be inherited from its parent. 
          
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.LayoutDirection.xml"><linktext>mx.core.LayoutDirection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
  FlexBitmap is a subclass of the Player's Bitmap class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Bitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexBitmap is a subclass of the Player's Bitmap class.
  It overrides the <codeph>toString()</codeph> method
  to return a string indicating the location of the object
  within the hierarchy of DisplayObjects in the application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexBitmap:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>The data for the bitmap. 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Whether or not the bitmap is snapped
	  to the nearest pixel.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether or not the bitmap is smoothed when scaled. 
	 
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructor.
	 
	  <p>Sets the <codeph>name</codeph> property to a string
	  returned by the <codeph>createUniqueName()</codeph>
	  method of the mx.utils.NameUtils class.
	  This string is the name of the object's class concatenated
	  with an integer that is unique within the application,
	  such as <codeph>"FlexBitmap12"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexBitmap:toString"><apiName>toString</apiName><shortdesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A String indicating the location of this object
	  within the DisplayObject hierarchy. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.
	  This string, such as <codeph>"MyApp0.HBox5.FlexBitmap12"</codeph>,
	  is built by the <codeph>displayObjectToString()</codeph> method
	  of the mx.utils.NameUtils class from the <codeph>name</codeph>
	  property of the object and its ancestors.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
  FlexSprite is a subclass of the Player's Sprite class
  and the superclass of UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSprite is a subclass of the Player's Sprite class
  and the superclass of UIComponent.
  It overrides the <codeph>toString()</codeph> method
  to return a string indicating the location of the object
  within the hierarchy of DisplayObjects in the application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSprite:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
	 
	  <p>Sets the <codeph>name</codeph> property to a string
	  returned by the <codeph>createUniqueName()</codeph>
	  method of the mx.utils.NameUtils class.</p>
	 
	  <p>This string is the name of the object's class concatenated
	  with an integer that is unique within the application,
	  such as <codeph>"Button17"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSprite:toString"><apiName>toString</apiName><shortdesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A String indicating the location of this object
	  within the DisplayObject hierarchy. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.
	  This string, such as <codeph>"MyApp0.HBox5.Button17"</codeph>,
	  is built by the <codeph>displayObjectToString()</codeph> method
	  of the mx.utils.NameUtils class from the <codeph>name</codeph>
	  property of the object and its ancestors.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
  FlexLoader is a subclass of the Player's Loader class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Loader</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexLoader is a subclass of the Player's Loader class.
  It overrides the <codeph>toString()</codeph> method
  to return a string indicating the location of the object
  within the hierarchy of DisplayObjects in the application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexLoader:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
     
      <p>Sets the <codeph>name</codeph> property to a string
      returned by the <codeph>createUniqueName()</codeph>
      method of the mx.utils.NameUtils class.</p>
      <p>This string is the name of the object's class concatenated
      with an integer that is unique within the application,
      such as <codeph>"FlexLoader13"</codeph>.</p>
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/createUniqueName()"><linktext>mx.utils.NameUtils.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexLoader:toString"><apiName>toString</apiName><shortdesc>
      Returns a string indicating the location of this object
      within the hierarchy of DisplayObjects in the Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A String indicating the location of this object
      within the DisplayObject hierarchy. 
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Returns a string indicating the location of this object
      within the hierarchy of DisplayObjects in the Application.
      This string, such as <codeph>"MyApp0.HBox5.FlexLoader13"</codeph>,
      is built by the <codeph>displayObjectToString()</codeph> method
      of the mx.utils.NameUtils class from the <codeph>name</codeph>
      property of the object and its ancestors.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/displayObjectToString()"><linktext>mx.utils.NameUtils.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
  ByteArrayAsset is a subclass of the flash.utils.ByteArray class
  which represents an arbitrary sequence of byte data that you embed
  in a Flex application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.utils:ByteArray</apiBaseClassifier></apiClassifierDef><apiDesc>
  ByteArrayAsset is a subclass of the flash.utils.ByteArray class
  which represents an arbitrary sequence of byte data that you embed
  in a Flex application.
 
  <p>The byte data that you are embedding can be in any kind of file,
  and the entire file is always embedded.
  You cannot embed the bytes of a particular asset that is in a SWF file,
  although you can embed an entire SWF file.</p>
 
  <p>The MXML compiler autogenerates a class that extends ByteArrayAsset
  to represent the embedded data.</p>
 
  <p>To embed an arbitrary file, you declare a variable of type Class,
  and put <codeph>[Embed]</codeph> metadata on it, using the MIME type
  <codeph>application/octet-stream</codeph>.
  For example, you embed a text file like this:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Story.txt", mimeType="application/octet-stream")]
  private var storyClass:Class;
  </pre>
 
  <p>The compiler autogenerates a subclass of the ByteArrayAsset class
  and sets your variable to be a reference to this autogenerated class.
  You can then use this class reference to create instances of the
  ByteArrayAsset using the <codeph>new</codeph> operator, and you can extract
  information from the byte array using methods of the ByteArray class:</p>
 
  <pre>
  var storyByteArray:ByteArrayAsset = ByteArrayAsset(new storyClass());
  var story:String = storyByteArray.readUTFBytes(storyByteArray.length);
  </pre>
 
  <p>You must specify that the MIME type for the embedding is
  <codeph>application/octet-stream</codeph>, which causes the byte data
  to be embedded "as is", with no interpretation.
  It also causes the autogenerated class to extend ByteArrayAsset
  rather than another asset class.</p>
 
  <p>For example, if you embed a PNG file without specifying this
  MIME type, the PNG data will be automatically transcoded
  into the bitmap format used by the player, and a subclass
  of BitmapAsset will be autogenerated to represent it.
  But if you specify the MIME type as <codeph>application/octet-stream</codeph>,
  then no transcoding will occur, the PNG data will be embedded
  as is, and the autogenerated class will extend ByteArrayAsset.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ByteArrayAsset:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
  MovieClipAsset is a subclass of the flash.display.MovieClip class
  which represents movieclip symbols that you embed in a Flex application
  from a SWF file produced by Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexMovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipAsset is a subclass of the flash.display.MovieClip class
  which represents movieclip symbols that you embed in a Flex application
  from a SWF file produced by Flash.
  It implements the IFlexDisplayObject interface, which makes it
  possible for the MovieClip to be displayed in an Image control,
  or to be used as a container background or a component skin.
 
  <p>The MovieClip that you're embedding must be a movieclip symbol
  that is in a SWF file.
  A common reason for using an embedded movieclip is that you have created
  a frame-based animation in Flash and want to use it in a Flex application.
  The MXML compiler autogenerates a class that extends MovieClipAsset
  to represent the embedded animation.</p>
 
  <p>You don't generally have to use the MovieClipAsset class directly
  when you write a Flex application.
  For example, you can use a movieclip animation as an application's
  background image by writing the following:</p>
 
  <pre>
  &lt;mx:Application backgroundImage="@Embed(source='Assets.swf', symbol='BackgroundAnimation')"/&gt;</pre>
 
  <p>or</p>
 
  <pre>
  &lt;fx:Style&gt;
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol="BackgroundAnimation")
      }
  &lt;fx:Style/&gt;</pre>
 
  <p>without having to understand that the MXML compiler has created
  a subclass of MovieClipAsset for you.</p>
 
  <p>However, it may be useful to understand what is happening
  at the ActionScript level.
  To embed a movieclip in ActionScript, you declare a variable
  of type Class, and put <codeph>[Embed]</codeph> metadata on it.
  For example:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="BackgroundAnimation")]
  private var backgroundAnimationClass:Class;</pre>
 
  <p>The MXML compiler notices that the BackgroundAnimation symbol
  in Assets.swf is a movie clip, autogenerates a subclass of the
  MovieClipAsset class to represent it, and sets your variable
  to be a reference to this autogenerated class.
  You can then use this class reference to create instances of the
  MovieClipAsset using the <codeph>new</codeph> operator, and you can use
  APIs of the MovieClip class on them:</p>
 
  <pre>
  var backgroundAnimation:MovieClipAsset =
      MovieClipAsset(new backgroundAnimationClass());
  var n:int = backgroundAnimation.totalFrames;</pre>
 
  <p>However, you rarely need to create MovieClipAsset instances yourself
  because image-related properties and styles can be set to an
  image-producing class, and components will create instances as necessary.
  For example, to set the application background to this animation,
  you can simply write the following:</p>
 
  <pre>
  &lt;mx:Application backgroundImage="{backgroundAnimationClass}"/&gt;</pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MovieClipAsset:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MovieClipAsset:move"><apiName>move</apiName><shortdesc>
      
	  Moves this object to the specified x and y coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The new x-position for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The new y-position for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Moves this object to the specified x and y coordinates.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:MovieClipAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Sets the actual size of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>The new width for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>The new height for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Sets the actual size of this object.
	 
	  <p>This method is mainly for use in implementing the
	  <codeph>updateDisplayList()</codeph> method, which is where
	  you compute this object's actual size based on
	  its explicit size, parent-relative (percent) size,
	  and measured size.
	  You then apply this actual size to the object
	  by calling <codeph>setActualSize()</codeph>.</p>
	 
	  <p>In other situations, you should be setting properties
	  such as <codeph>width</codeph>, <codeph>height</codeph>,
	  <codeph>percentWidth</codeph>, or <codeph>percentHeight</codeph>
	  rather than calling this method.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:MovieClipAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Returns an EdgeMetrics object for the border that has four properties:
      left, top, right,
      and bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Returns an EdgeMetrics object for the border that has four properties:
      <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph>,
      and <codeph>bottom</codeph>.
      The value of each property is equal to the thickness of one side
      of the border, in pixels.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  The measured height of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured height of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  The measured width of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured width of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FontAsset"><apiName>FontAsset</apiName><shortdesc>
  FontAsset is a subclass of the flash.text.Font class 
  which represents fonts that you embed in a Flex application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.text:Font</apiBaseClassifier></apiClassifierDef><apiDesc>
  FontAsset is a subclass of the flash.text.Font class 
  which represents fonts that you embed in a Flex application.
 
  <p>The font that you embed can be TrueType (TTF) or OpenType (OTF).
  You can also embed a system font or a font that is in a SWF file
  produced by Flash.
  In each of these cases, the MXML compiler autogenerates a class
  that extends FontAsset to represent the embedded font.</p>
 
  <p>You do not generally use the FontAsset class directly
  when you write a Flex application.
  For example, you can embed a font by using the <codeph>font-face</codeph> CSS selector
  without having to understand that the MXML compiler has created
  a subclass of FontAsset for you.</p>
 
  <p>However, it might be useful to understand what is happening
  at the ActionScript level.
  To embed a font in ActionScript, you declare a variable
  of type Class, and put <codeph>[Embed]</codeph> metadata on it.
  For example, you embed a TTF file like this:</p>
 
  <pre>
  [Embed(source="Fancy.ttf", fontName="Fancy")] 
  var fancyClass:Class;
  </pre>
 
  <p>The MXML compiler transcodes the TTF data
  into the font format that the player uses, autogenerates
  a subclass of the FontAsset class, and sets your variable
  to be a reference to this autogenerated class.
  You can then use this class reference to create instances of the
  FontAsset by using the <codeph>new</codeph> operator, and you can use
  APIs of the Font class on them; for example:</p>
 
  <pre>
  var fancyFont:FontAsset = FontAsset(new fancyClass());
  var hasDigits:Boolean = fancyFont.hasGlyphs("0123456789");
  </pre>
 
  <p>However, you rarely need to create FontAsset instances yourself
  because you use the <codeph>fontName</codeph> that you specify
  in the <codeph>[Embed]</codeph> metadata to refer to the font; for example,
  you set the <codeph>fontFamily</codeph> CSS style to the font name
  (in this example, <codeph>"Fancy"</codeph>), and not to a FontAsset instance such as
  <codeph>fancyFont</codeph> or to the <codeph>fancyClass</codeph>
  class reference. For example:</p>
 
  <pre>
  &lt;mx:Label text="Thank you for your order." fontFamily="Fancy"/&gt;
  </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.Font.xml"><linktext>flash.text.Font</linktext></link></related-links><apiConstructor id="mx.core:FontAsset:FontAsset"><apiName>FontAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
  FlexSimpleButton is a subclass of the Player's SimpleButton class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:SimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSimpleButton is a subclass of the Player's SimpleButton class.
  It overrides the <codeph>toString()</codeph> method
  to return a string indicating the location of the object
  within the hierarchy of DisplayObjects in the application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSimpleButton:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
	 
	  <p>Sets the <codeph>name</codeph> property to a string
	  returned by the <codeph>createUniqueName()</codeph>
	  method of the mx.utils.NameUtils class.</p>
	 
	  <p>This string is the name of the object's class concatenated
	  with an integer that is unique within the application,
	  such as <codeph>"FlexSimpleButton16"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSimpleButton:toString"><apiName>toString</apiName><shortdesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A String indicating the location of this object
	  within the DisplayObject hierarchy. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Returns a string indicating the location of this object
	  within the hierarchy of DisplayObjects in the Application.
	  This string, such as <codeph>"MyApp0.HBox5.FlexSimpleButton16"</codeph>,
	  is built by the <codeph>displayObjectToString()</codeph> method
	  of the mx.utils.NameUtils class from the <codeph>name</codeph>
	  property of the object and its ancestors.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
  SoundAsset is a subclass of the flash.media.Sound class
  which represents sounds that you embed in a Flex application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.media:Sound</apiBaseClassifier></apiClassifierDef><apiDesc>
  SoundAsset is a subclass of the flash.media.Sound class
  which represents sounds that you embed in a Flex application.
 
  <p>The sound that you're embedding can be in an MP3 file.
  You can also embed a sound symbol that is in a SWF file produced by Flash.
  In both cases, the MXML compiler autogenerates a class that extends
  SoundAsset to represent the embedded sound data.</p>
 
  <p>You don't generally have to use the SoundAsset class directly
  when you write a Flex application.
  For example, you can embed an MP3 file and use it in a SoundEffect
  simply by writing the following:</p>
 
  <pre>
  &lt;mx:SoundEffect id="beep" source="@Embed(source='Beep.mp3')"/&gt;</pre>
 
  <p>without having to understand that the MXML compiler has created
  a subclass of SoundAsset for you.</p>
 
  <p>However, it may be useful to understand what is happening
  at the ActionScript level.
  To embed a bitmap in ActionScript, you declare a variable
  of type Class, and put <codeph>[Embed]</codeph> metadata on it.
  For example, you embed an MP3 file like this:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Beep.mp3")]
  private var beepClass:Class;</pre>
 
  <p>The MXML compiler sees the .mp3 extension, transcodes the MP3 data
  into the sound format that the player uses, autogenerates
  a subclass of the SoundAsset class, and sets your variable
  to be a reference to this autogenerated class.
  You can then use this class reference to create instances of the
  SoundAsset using the <codeph>new</codeph> operator, and you can use
  APIs of the Sound class on them:</p>
 
  <pre>
    var beepSound:SoundAsset = SoundAsset(new beepClass());
    beepSound.play();</pre>
 
  <p>However, you rarely need to create SoundAsset instances yourself
  because sound-related properties and styles can simply be set to a
  sound-producing class, and components will create sound instances
  as necessary.
  For example, to play this sound with a SoundEffect, you can 
  set the SoundEffect's <codeph>source</codeph> property to
  <codeph>beepClass</codeph>.
  In MXML you could do this as follows:</p>
 
  <pre>
  &lt;mx:SoundEffect id="beepEffect" source="{beepClass}"/&gt;</pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SoundAsset:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ApplicationDomainTarget"><apiName>ApplicationDomainTarget</apiName><shortdesc>
  The ApplicationDomainTarget class defines the possible values for the 
  applicationDomainTarget property of the RSLData
  class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  The ApplicationDomainTarget class defines the possible values for the 
  <codeph>applicationDomainTarget</codeph> property of the <codeph>RSLData</codeph>
  class. Each application domain target specifies a relative application 
  domain that is resolved at runtime.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#RSLData"><linktext>mx.core.RSLData</linktext></link></related-links><apiValue id="mx.core:ApplicationDomainTarget:CURRENT"><apiName>CURRENT</apiName><shortdesc>
      The application domain of the current module factory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>current</apiData><apiType value="String"/></apiValueDef><apiDesc>
      The application domain of the current module factory.
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
      The default behavior for RSL loading is to load an RSL as high in 
      the parent module factory chain as possible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc>
      The default behavior for RSL loading is to load an RSL as high in 
      the parent module factory chain as possible. In order to load an RSL
      into a parent module factory, that module factory must have been 
      compiled with that RSL specified in the compiler options. If no parent module 
      factories were compiled with that RSL , then the RSL will be loaded in
      the application domain of the module factory loading the RSL.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:PARENT"><apiName>PARENT</apiName><shortdesc>
      The application domain of the parent module factory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
      The application domain of the parent module factory.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:TOP_LEVEL"><apiName>TOP_LEVEL</apiName><shortdesc>
      The application domain of the top-level module factory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top-level</apiData><apiType value="String"/></apiValueDef><apiDesc>
      The application domain of the top-level module factory.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
  TextFieldAsset is a subclass of the flash.text.TextField class
  which represents TextField symbols that you embed in a Flex
  application from a SWF file produced by Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextFieldAsset is a subclass of the flash.text.TextField class
  which represents TextField symbols that you embed in a Flex
  application from a SWF file produced by Flash.
  It implements the IFlexDisplayObject interface, which makes it
  possible for a TextFieldAsset to be displayed in an Image control,
  or to be used as a container background or a component skin.
 
  <p>This class is included in Flex for completeness, so that any kind
  of symbol in a SWF file produced by Flash can be embedded
  in a Flex application.
  However, Flex applications do not typically use embedded TextFields.
  Refer to more commonly-used asset classes such as BitmapAsset
  for more information about how embedded assets work in Flex.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:TextFieldAsset:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:TextFieldAsset:move"><apiName>move</apiName><shortdesc>
      
	  Moves this object to the specified x and y coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The new x-position for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The new y-position for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Moves this object to the specified x and y coordinates.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:TextFieldAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Sets the actual size of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>The new width for this object.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>The new height for this object.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Sets the actual size of this object.
	 
	  <p>This method is mainly for use in implementing the
	  <codeph>updateDisplayList()</codeph> method, which is where
	  you compute this object's actual size based on
	  its explicit size, parent-relative (percent) size,
	  and measured size.
	  You then apply this actual size to the object
	  by calling <codeph>setActualSize()</codeph>.</p>
	 
	  <p>In other situations, you should be setting properties
	  such as <codeph>width</codeph>, <codeph>height</codeph>,
	  <codeph>percentWidth</codeph>, or <codeph>percentHeight</codeph>
	  rather than calling this method.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:TextFieldAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  The measured height of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured height of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:TextFieldAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  The measured width of this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  The measured width of this object.
	 
	  <p>This is typically hard-coded for graphical skins
	  because this number is simply the number of pixels in the graphic.
	  For code skins, it can also be hard-coded
	  if you expect to be drawn at a certain size.
	  If your size can change based on properties, you may want
	  to also be an ILayoutManagerClient so a <codeph>measure()</codeph>
	  method will be called at an appropriate time,
	  giving you an opportunity to compute a <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:RSLData"><apiName>RSLData</apiName><shortdesc>
  A Class that describes configuration data for an RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  A Class that describes configuration data for an RSL.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:RSLData:RSLData"><apiName>RSLData</apiName><shortdesc>
      Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>rslURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The location of the RSL.
      </apiDesc></apiParam><apiParam><apiItemName>policyFileURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The location of the policy file url (optional).
      </apiDesc></apiParam><apiParam><apiItemName>digest</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The digest of the RSL. This is null for an RSL without 
      a digest.
      </apiDesc></apiParam><apiParam><apiItemName>hashType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The type of hash used to create the digest. The only 
      supported value is <codeph>SHA256.TYPE_ID</codeph>.
      </apiDesc></apiParam><apiParam><apiItemName>isSigned</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>True if the RSL has been signed by Adobe, false 
      otherwise.
      </apiDesc></apiParam><apiParam><apiItemName>verifyDigest</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Detemines if the RSL's digest should be verified
      after it is loaded. 
      </apiDesc></apiParam><apiParam><apiItemName>applicationDomainTarget</apiItemName><apiType value="String"/><apiData>default</apiData><apiDesc>The application domain where the the
      RSL should be loaded. For valid values see the ApplicationDomainTarget
      enumeration.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructor.
     
      </apiDesc></apiConstructorDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiConstructor><apiValue id="mx.core:RSLData:applicationDomainTarget:get"><apiName>applicationDomainTarget</apiName><shortdesc>
      The requested application domain to load the RSL into.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      The requested application domain to load the RSL into.
      For valid values see the ApplicationDomainTarget enumeration.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiValue><apiValue id="mx.core:RSLData:digest:get"><apiName>digest</apiName><shortdesc>
      The digest of the RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      The digest of the RSL. This is null for an RSL without a digest.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:hashType:get"><apiName>hashType</apiName><shortdesc>
      The type of hash used to create the RSL digest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      The type of hash used to create the RSL digest. The only supported hash
      type is <codeph>SHA256.TYPE_ID</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:isSigned:get"><apiName>isSigned</apiName><shortdesc>
      True if the RSL has been signed by Adobe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True if the RSL has been signed by Adobe. False otherwise.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Non-null if this RSL should be loaded into an application
      domain other than the application domain associated with the
      module factory performing the load.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Non-null if this RSL should be loaded into an application
      domain other than the application domain associated with the
      module factory performing the load. If null, then load into
      the current application domain.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:policyFileURL:get"><apiName>policyFileURL</apiName><shortdesc>
      An URL that specifies the location of the policy file (optional).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      An URL that specifies the location of the policy file (optional).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:rslURL:get"><apiName>rslURL</apiName><shortdesc>
      The location of the RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      The location of the RSL. The URL can be absolute or relative to the 
      application or module. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:verifyDigest:get"><apiName>verifyDigest</apiName><shortdesc>
      True if the digest must be verified before loading the RSL into memory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True if the digest must be verified before loading the RSL into memory.
      False allows the RSL to be loaded without verification. Signed RSLs
      are always verified regardless of the value.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModuleFactory"><apiName>IFlexModuleFactory</apiName><shortdesc>
  The IFlexModuleFactory interface represents the contract expected
  for bootstrapping Flex applications and dynamically loaded
  modules.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  The IFlexModuleFactory interface represents the contract expected
  for bootstrapping Flex applications and dynamically loaded
  modules.
   <p>Calling the <codeph>info()</codeph> method is legal immediately after
  the <codeph>complete</codeph> event is dispatched.</p>
   <p>A well-behaved module dispatches a <codeph>ready</codeph> event when
  it is safe to call the <codeph>create()</codeph> method.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      Adds an RSL to the preloadedRSLs list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>The loaderInfo of the loaded RSL.
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>The RSL's configuration information. A Vector of RSLData.
      The first element in the array is the primary RSL. The remaining 
      elements are failover RSLs.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Adds an RSL to the preloadedRSLs list. This method is called by child
      module factories when they add load an RSL into this module factory's
      application domain.
           <p>You do not call this method directly. This method is called by child
      module factories when they add load an RSL into this module factory's
      application domain.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Calls the Security.allowDomain() method for the SWF 
      associated with this IFlexModuleFactory plus all the SWFs associated
      with RSLs preloaded by this IFlexModuleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>One or more strings or URLRequest objects that name 
      the domains from which you want to allow access. 
      You can specify the special domain "*" to allow access from all domains. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Calls the <codeph>Security.allowDomain()</codeph> method for the SWF 
      associated with this IFlexModuleFactory plus all the SWFs associated
      with RSLs preloaded by this IFlexModuleFactory. RSLs loaded after this
      call will, by default, allow the same domains as have been allowed by
      previous calls to this method. This behavior is controlled by the <codeph>
      allowDomainsInNewRSLs</codeph> property.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Calls the Security.allowInsecureDomain() method for the 
      SWF associated with this IFlexModuleFactory
      plus all the SWFs associated with RSLs preloaded by this 
      IFlexModuleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>One or more strings or URLRequest objects that name 
      the domains from which you want to allow access. 
      You can specify the special domain "*" to allow access from all domains. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Calls the <codeph>Security.allowInsecureDomain()</codeph> method for the 
      SWF associated with this IFlexModuleFactory
      plus all the SWFs associated with RSLs preloaded by this 
      IFlexModuleFactory. RSLs loaded after this call will, by default, 
      allow the same domains as have been allowed by
      previous calls to this method. This behavior is controlled by the <codeph>
      allowInsecureDomainsInNewRSLs</codeph> property.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowInsecureDomain()"><linktext>flash.system.Security.allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc>
      A way to call a method in this IFlexModuleFactory's context
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whatever the function returns, if anything.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>The function or method to call.
      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>The <codeph>this</codeph> pointer for the function.
      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>The arguments for the function.
      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>If <codeph>true</codeph>, the function returns a value.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      A way to call a method in this IFlexModuleFactory's context
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="Function.apply.xml"><linktext>Function.apply</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:create"><apiName>create</apiName><shortdesc>
      A factory method that requests
      an instance of a definition known to the module.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the module, or <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>parameters</apiItemName><apiType value="restParam"/><apiDesc>An optional list of arguments. You can pass any number
      of arguments, which are then stored in an Array called <codeph>parameters</codeph>.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      A factory method that requests
      an instance of a definition known to the module.
           <p>You can provide an optional set of parameters to let
      building factories change what they create based
      on the input.
      Passing <codeph>null</codeph> indicates that the default
      definition is created, if possible.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:getImplementation"><apiName>getImplementation</apiName><shortdesc>
      Get the implementation for an interface.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The implementation for the interface.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>The interface.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Get the implementation for an interface.
      Similar to <codeph>Singleton.getInstance()</codeph> method, but per-
      IFlexModuleFactory.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:info"><apiName>info</apiName><shortdesc>
      Returns a block of key/value pairs
      that hold static data known to the module.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An object containing key/value pairs. Typically, this object
      contains information about the module or modules created by this 
      factory; for example:
     
      <pre>
      return {"description": "This module returns 42."};
      </pre>
      
      Other common values in the returned object include the following:
      <ul>
       <li><codeph>fonts</codeph>: A list of embedded font faces.</li>
       <li><codeph>rsls</codeph>: A list of run-time shared libraries.</li>
       <li><codeph>mixins</codeph>: A list of classes initialized at startup.</li>
      </ul>
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Returns a block of key/value pairs
      that hold static data known to the module.
      This method always succeeds, but can return an empty object.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:registerImplementation"><apiName>registerImplementation</apiName><shortdesc>
      Register an implementation for an interface.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>The interface.
           </apiDesc></apiParam><apiParam><apiItemName>impl</apiItemName><apiType value="Object"/><apiDesc>The implementation.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Register an implementation for an interface.
      Similar to the <codeph>Singleton.registerClass()</codeph> method, but per-
      IFlexModuleFactory, and takes an instance not a class.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      Controls whether the domains allowed by calls to allowDomain()
      are also allowed by RSLs loaded after the call.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Controls whether the domains allowed by calls to <codeph>allowDomain()</codeph>
      are also allowed by RSLs loaded after the call. Additional RSLs
      may be loaded into this module factory by sub-applications or modules.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      Controls whether the domains allowed by calls to allowInsecureDomain()
       are also allowed by RSLs loaded after the call.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Controls whether the domains allowed by calls to <codeph>allowInsecureDomain()
      </codeph> are also allowed by RSLs loaded after the call. Additional RSLs 
      may be added to this module factory by sub-applications or modules.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      The RSLs loaded by this SystemManager or FlexModuleFactory before the
      application starts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      The RSLs loaded by this SystemManager or FlexModuleFactory before the
      application starts. This dictionary may also include RSLs loaded into this 
      module factory's application domain by other modules or 
      sub-applications. When a new dictionary entry is added by a child module
      factory an <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph> event is dispatched
      by module factory owning the dictionary.
     
      Information about preloadedRSLs is stored in a Dictionary. The key is
      the RSL's LoaderInfo. The value is the a Vector of RSLData where the 
      first element is the primary RSL and the remaining elements are 
      failover RSLs.
           </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>